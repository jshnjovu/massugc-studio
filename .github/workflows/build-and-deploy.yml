name: Build and Deploy MassUGC Studio

on:
  push:
    branches: [main]  # ONLY main branch
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  BACKEND_DIR: 'backend'
  FRONTEND_DIR: 'frontend'
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
  PUPPETEER_SKIP_DOWNLOAD: 'true'

jobs:
  # ============================================================================
  # STAGE 1: BUILD BACKEND WITH PYINSTALLER
  # ============================================================================
  
  build-backend-windows:
    name: Build Backend (Windows)
    runs-on: windows-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install FFmpeg
        run: |
          choco install ffmpeg -y
          ffmpeg -version

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build backend with PyInstaller
        run: |
          echo "Building Windows backend..."
          pyinstaller ZyraVideoAgentBackend-minimal.spec --clean --noconfirm
          echo "✓ Backend built successfully"

      - name: Verify backend build
        run: |
          if (Test-Path "dist\ZyraVideoAgentBackend\ZyraVideoAgentBackend.exe") {
            echo "✅ Backend executable exists"
            Get-Item "dist\ZyraVideoAgentBackend\ZyraVideoAgentBackend.exe" | Select-Object Name, Length
          } else {
            echo "❌ Backend executable not found!"
            exit 1
          }
        shell: pwsh

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-windows-${{ github.sha }}
          path: backend/dist/ZyraVideoAgentBackend/
          retention-days: 7

  build-backend-macos:
    name: Build Backend (macOS)
    runs-on: macos-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install FFmpeg
        run: |
          brew install ffmpeg
          ffmpeg -version

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build backend with PyInstaller
        run: |
          echo "Building macOS backend..."
          pyinstaller ZyraVideoAgentBackend-minimal.spec --clean --noconfirm
          echo "✓ Backend built successfully"

      - name: Verify backend build
        run: |
          if [ -f "dist/ZyraVideoAgentBackend/ZyraVideoAgentBackend" ]; then
            echo "✅ Backend executable exists"
            ls -lh "dist/ZyraVideoAgentBackend/ZyraVideoAgentBackend"
            chmod +x "dist/ZyraVideoAgentBackend/ZyraVideoAgentBackend"
          else
            echo "❌ Backend executable not found!"
            exit 1
          fi

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-macos-${{ github.sha }}
          path: backend/dist/ZyraVideoAgentBackend/
          retention-days: 7

  # ============================================================================
  # STAGE 2: BUILD DESKTOP APPLICATION WITH NOTARIZATION
  # ============================================================================

  build-desktop-windows:
    name: Build Desktop (Windows)
    runs-on: windows-latest
    needs: [build-backend-windows]
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-windows-${{ github.sha }}
          path: frontend/ZyraData/backend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (with postinstall optimization)
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
        run: |
          echo "Installing frontend dependencies..."
          echo "Note: electron-builder install-app-deps runs during postinstall (can take 10-15 min)"
          npm ci --loglevel=verbose
          echo "✓ Dependencies installed"

      - name: Build renderer
        run: |
          echo "Building Vite frontend..."
          npm run build:renderer
          echo "✓ Frontend built"

      - name: Build Windows application
        run: |
          echo "Building Windows desktop app..."
          npm run build:win
          echo "✓ Windows app built"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: massugc-studio-windows-${{ github.sha }}
          path: frontend/release-2/
          retention-days: 90

  build-desktop-macos:
    name: Build Desktop (macOS) - WITH NOTARIZATION
    runs-on: macos-latest
    needs: [build-backend-macos]
    timeout-minutes: 120  # Extended for notarization
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-macos-${{ github.sha }}
          path: frontend/ZyraData/backend

      - name: Set backend executable permissions
        run: chmod +x ZyraData/backend/ZyraVideoAgentBackend

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (with postinstall optimization)
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
        run: |
          echo "Installing frontend dependencies..."
          echo "Note: electron-builder install-app-deps runs during postinstall (can take 10-15 min)"
          npm ci --loglevel=verbose
          echo "✓ Dependencies installed"

      - name: Build renderer
        run: |
          echo "Building Vite frontend..."
          npm run build:renderer
          echo "✓ Frontend built"

      - name: Build macOS application WITH code signing and notarization
        run: |
          echo "Building macOS desktop app..."
          echo "⚠️  This includes Apple notarization and may take 30-60 minutes"
          echo "Skipping sign-backend.sh (will be signed by electron-builder)"
          npx dotenv -e .env -- electron-builder --mac
          echo "✓ macOS app built, signed, and notarized!"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Verify notarization
        run: |
          echo "Verifying .dmg file was created..."
          if [ -f release-2/*.dmg ]; then
            ls -lh release-2/*.dmg
            echo "✅ DMG created successfully"
          else
            echo "❌ DMG not found!"
            exit 1
          fi

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: massugc-studio-macos-${{ github.sha }}
          path: frontend/release-2/
          retention-days: 90

  # ============================================================================
  # STAGE 3: TEST (OPTIONAL - Frontend Jest Tests)
  # ============================================================================

  test-windows:
    name: Test (Windows)
    runs-on: windows-latest
    needs: [build-desktop-windows]
    if: false  # Temporarily disabled - test script needs fixing
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- --coverage
        env:
          CI: true

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-windows-${{ github.sha }}
          path: frontend/coverage/
          retention-days: 30

  test-macos:
    name: Test (macOS)
    runs-on: macos-latest
    needs: [build-desktop-macos]
    if: false  # Temporarily disabled - test script needs fixing
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- --coverage
        env:
          CI: true

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-macos-${{ github.sha }}
          path: frontend/coverage/
          retention-days: 30

  # ============================================================================
  # STAGE 4: CREATE GITHUB RELEASE (Faster downloads via CDN)
  # ============================================================================

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-desktop-windows, build-desktop-macos]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(cat frontend/package.json | grep '"version"' | head -1 | sed 's/.*: "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-windows-${{ github.sha }}
          path: windows-release/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-macos-${{ github.sha }}
          path: macos-release/

      - name: List downloaded files
        run: |
          echo "Windows files:"
          ls -lh windows-release/
          echo ""
          echo "macOS files:"
          ls -lh macos-release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: MassUGC Studio v${{ steps.get_version.outputs.version }}
          body: |
            ## MassUGC Studio v${{ steps.get_version.outputs.version }}
            
            **Release Date:** ${{ github.event.head_commit.timestamp }}
            **Commit:** ${{ github.sha }}
            
            ### 🎉 What's New
            - Production build security fixes
            - FFmpeg executable permissions fixed
            - New app icon with proper rounding
            - Reduced logging in production builds
            - Console log colors fixed
            
            ### 📥 Downloads
            - **Windows 64-bit:** `MassUGC Studio Setup *.exe`
            - **Windows 32-bit:** `MassUGC Studio Setup *-ia32.exe`  
            - **macOS (Apple Silicon):** `*.dmg`
            
            ### ✅ Verified Working
            - Fresh installs start with empty state
            - No API keys pre-configured
            - Text overlays work on all platforms
            - FFmpeg video processing functional
            
            ---
            
            **Full changelog:** See commit history for details
          draft: false
          prerelease: false
          files: |
            windows-release/*.exe
            macos-release/*.dmg
            windows-release/*.exe.blockmap
            macos-release/*.dmg.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
