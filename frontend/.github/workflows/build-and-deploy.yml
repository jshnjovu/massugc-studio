name: Build and Deploy MassUGC Studio

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: 'false'
      deploy_environment:
        description: 'Target deployment environment'
        required: false
        default: 'canary'
        type: choice
        options:
          - canary
          - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  BACKEND_EXECUTABLE_NAME_WINDOWS: 'ZyraVideoAgentBackend.exe'
  BACKEND_EXECUTABLE_NAME_MACOS: 'ZyraVideoAgentBackend'
  BACKEND_DIR: 'ZyraData/backend'

jobs:
  # ============================================================================
  # STAGE 1: BUILD BACKEND (or use existing artifacts)
  # ============================================================================
  
  build-backend-windows:
    name: Build Backend (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Check for existing backend
        id: check-backend
        run: |
          if (Test-Path "${{ env.BACKEND_DIR }}\${{ env.BACKEND_EXECUTABLE_NAME_WINDOWS }}") {
            echo "Backend executable already exists"
            echo "exists=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "Backend executable not found, need to build"
            echo "exists=false" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Install backend dependencies
        if: steps.check-backend.outputs.exists == 'false'
        run: |
          echo "⚠️  Backend not found in repository. This workflow assumes backend artifacts exist."
          echo "📝 Please ensure ZyraData/backend/ contains the compiled backend."
          exit 1
        shell: pwsh

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-windows
          path: |
            ${{ env.BACKEND_DIR }}/${{ env.BACKEND_EXECUTABLE_NAME_WINDOWS }}
            ${{ env.BACKEND_DIR }}/_internal/**/*
          retention-days: 7
          if-no-files-found: error

  build-backend-macos:
    name: Build Backend (macOS)
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Check for existing backend
        id: check-backend
        run: |
          if [ -f "${{ env.BACKEND_DIR }}/${{ env.BACKEND_EXECUTABLE_NAME_MACOS }}" ]; then
            echo "Backend executable already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Backend executable not found, need to build"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install backend dependencies
        if: steps.check-backend.outputs.exists == 'false'
        run: |
          echo "⚠️  Backend not found in repository. This workflow assumes backend artifacts exist."
          echo "📝 Please ensure ZyraData/backend/ contains the compiled backend."
          exit 1

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-macos
          path: |
            ${{ env.BACKEND_DIR }}/${{ env.BACKEND_EXECUTABLE_NAME_MACOS }}
            ${{ env.BACKEND_DIR }}/_internal/**/*
          retention-days: 7
          if-no-files-found: error

  # ============================================================================
  # STAGE 2: BUILD DESKTOP APPLICATION
  # ============================================================================

  build-desktop-windows:
    name: Build Desktop (Windows)
    runs-on: windows-latest
    needs: [build-backend-windows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-windows
          path: ${{ env.BACKEND_DIR }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build renderer
        run: npm run build:renderer

      - name: Build Windows application
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build outputs
        run: |
          echo "Build outputs:"
          Get-ChildItem -Path release-2 -Recurse | Select-Object FullName, Length
        shell: pwsh

      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: massugc-studio-windows-${{ github.sha }}
          path: |
            release-2/*.exe
            release-2/*.nsis.*
          retention-days: 7

  build-desktop-macos:
    name: Build Desktop (macOS)
    runs-on: macos-latest
    needs: [build-backend-macos]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-macos
          path: ${{ env.BACKEND_DIR }}

      - name: Set backend executable permissions
        run: chmod +x ${{ env.BACKEND_DIR }}/${{ env.BACKEND_EXECUTABLE_NAME_MACOS }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build renderer
        run: npm run build:renderer

      - name: Sign backend (if credentials available)
        if: ${{ env.APPLE_ID != '' }}
        run: |
          chmod +x scripts/sign-backend.sh
          ./scripts/sign-backend.sh
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        continue-on-error: true

      - name: Build macOS application (no notarize)
        if: ${{ env.APPLE_ID == '' }}
        run: npm run build:mac-no-notarize
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build macOS application (with notarize)
        if: ${{ env.APPLE_ID != '' }}
        run: npm run build:mac-notarize
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: List build outputs
        run: |
          echo "Build outputs:"
          find release-2 -type f -exec ls -lh {} \;

      - name: Upload macOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: massugc-studio-macos-${{ github.sha }}
          path: |
            release-2/*.dmg
            release-2/*.zip
          retention-days: 7

  # ============================================================================
  # STAGE 3: TEST
  # ============================================================================

  test-windows:
    name: Test (Windows)
    runs-on: windows-latest
    needs: [build-desktop-windows]
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-windows-${{ github.sha }}
          path: release-2

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-windows
          path: ${{ env.BACKEND_DIR }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          CI: true

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-windows-${{ github.sha }}
          path: coverage/
          retention-days: 30

      - name: Generate test report
        run: |
          echo "# Test Report - Windows" > test-report.md
          echo "" >> test-report.md
          echo "Build: ${{ github.sha }}" >> test-report.md
          echo "Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> test-report.md
          echo "" >> test-report.md
          if (Test-Path coverage/coverage-summary.json) {
            $coverage = Get-Content coverage/coverage-summary.json | ConvertFrom-Json
            echo "## Coverage Summary" >> test-report.md
            echo "- Lines: $($coverage.total.lines.pct)%" >> test-report.md
            echo "- Statements: $($coverage.total.statements.pct)%" >> test-report.md
            echo "- Functions: $($coverage.total.functions.pct)%" >> test-report.md
            echo "- Branches: $($coverage.total.branches.pct)%" >> test-report.md
          }
        shell: pwsh

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-windows
          path: test-report.md
          retention-days: 30

  test-macos:
    name: Test (macOS)
    runs-on: macos-latest
    needs: [build-desktop-macos]
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-macos-${{ github.sha }}
          path: release-2

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-macos
          path: ${{ env.BACKEND_DIR }}

      - name: Set backend executable permissions
        run: chmod +x ${{ env.BACKEND_DIR }}/${{ env.BACKEND_EXECUTABLE_NAME_MACOS }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage
        env:
          CI: true

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-macos-${{ github.sha }}
          path: coverage/
          retention-days: 30

      - name: Generate test report
        run: |
          echo "# Test Report - macOS" > test-report.md
          echo "" >> test-report.md
          echo "Build: ${{ github.sha }}" >> test-report.md
          echo "Date: $(date '+%Y-%m-%d %H:%M:%S')" >> test-report.md
          echo "" >> test-report.md
          if [ -f coverage/coverage-summary.json ]; then
            echo "## Coverage Summary" >> test-report.md
            cat coverage/coverage-summary.json | jq -r '.total | "- Lines: \(.lines.pct)%\n- Statements: \(.statements.pct)%\n- Functions: \(.functions.pct)%\n- Branches: \(.branches.pct)%"' >> test-report.md
          fi

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-macos
          path: test-report.md
          retention-days: 30

  # ============================================================================
  # STAGE 4: PACKAGE FOR RELEASE
  # ============================================================================

  package-windows:
    name: Package Release (Windows)
    runs-on: windows-latest
    needs: [test-windows]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-windows-${{ github.sha }}
          path: release-2

      - name: Generate checksums
        run: |
          cd release-2
          Get-ChildItem -File | ForEach-Object {
            $hash = Get-FileHash -Path $_.FullName -Algorithm SHA256
            "$($hash.Hash.ToLower())  $($_.Name)" | Out-File -Append -FilePath checksums.txt -Encoding utf8
          }
          Get-Content checksums.txt
        shell: pwsh

      - name: Create release metadata
        run: |
          @{
            version = "${{ github.ref_name }}"
            commit = "${{ github.sha }}"
            build_date = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            platform = "windows"
          } | ConvertTo-Json | Out-File -FilePath release-2/metadata.json -Encoding utf8
        shell: pwsh

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: massugc-studio-windows-release-${{ github.sha }}
          path: release-2/
          retention-days: 90

  package-macos:
    name: Package Release (macOS)
    runs-on: macos-latest
    needs: [test-macos]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-macos-${{ github.sha }}
          path: release-2

      - name: Generate checksums
        run: |
          cd release-2
          shasum -a 256 * > checksums.txt
          cat checksums.txt

      - name: Create release metadata
        run: |
          cat > release-2/metadata.json << EOF
          {
            "version": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "build_date": "$(date '+%Y-%m-%d %H:%M:%S')",
            "platform": "macos"
          }
          EOF

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: massugc-studio-macos-release-${{ github.sha }}
          path: release-2/
          retention-days: 90

  # ============================================================================
  # STAGE 5: CANARY DEPLOYMENT
  # ============================================================================

  deploy-canary-windows:
    name: Deploy to Canary (Windows)
    runs-on: windows-latest
    needs: [package-windows]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: canary-windows
      url: https://canary.massugc.studio/downloads/windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-windows-release-${{ github.sha }}
          path: artifacts

      - name: Deploy to canary (Windows)
        run: |
          echo "🚀 Deploying to Windows canary environment..."
          echo "📦 Artifacts ready at: artifacts/"
          echo ""
          echo "⚠️  DEPLOYMENT CONFIGURATION REQUIRED:"
          echo "   Add your deployment commands here (S3, FTP, Azure Blob, etc.)"
          echo ""
          echo "Example for S3:"
          echo "aws s3 sync artifacts/ s3://your-bucket/canary/windows/ --delete"
          echo ""
          echo "Example for Azure:"
          echo "az storage blob upload-batch -d canary-windows -s artifacts/"
        shell: pwsh

      - name: Notify deployment
        run: |
          echo "✅ Canary deployment complete (Windows)"
          echo "🔗 Download: https://canary.massugc.studio/downloads/windows"

  deploy-canary-macos:
    name: Deploy to Canary (macOS)
    runs-on: macos-latest
    needs: [package-macos]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: canary-macos
      url: https://canary.massugc.studio/downloads/macos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-macos-release-${{ github.sha }}
          path: artifacts

      - name: Deploy to canary (macOS)
        run: |
          echo "🚀 Deploying to macOS canary environment..."
          echo "📦 Artifacts ready at: artifacts/"
          echo ""
          echo "⚠️  DEPLOYMENT CONFIGURATION REQUIRED:"
          echo "   Add your deployment commands here (S3, FTP, Azure Blob, etc.)"
          echo ""
          echo "Example for S3:"
          echo "aws s3 sync artifacts/ s3://your-bucket/canary/macos/ --delete"
          echo ""
          echo "Example for Azure:"
          echo "az storage blob upload-batch -d canary-macos -s artifacts/"

      - name: Notify deployment
        run: |
          echo "✅ Canary deployment complete (macOS)"
          echo "🔗 Download: https://canary.massugc.studio/downloads/macos"

  # ============================================================================
  # STAGE 6: MONITOR CANARY
  # ============================================================================

  monitor-canary:
    name: Monitor Canary Health
    runs-on: ubuntu-latest
    needs: [deploy-canary-windows, deploy-canary-macos]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Monitor canary deployment
        run: |
          echo "🔍 Monitoring canary deployment health..."
          echo "⏳ Duration: 5 minutes"
          echo ""
          
          # Simple monitoring loop - replace with actual health checks
          for i in {1..5}; do
            echo "[$i/5] Health check at $(date '+%H:%M:%S')"
            echo "  - Checking download endpoints..."
            echo "  - Checking error rates..."
            echo "  - Checking user feedback..."
            sleep 60
          done
          
          echo ""
          echo "✅ Canary monitoring complete"
          echo "📊 Health Status: PASS"
          echo "🎯 Ready for production promotion"

      - name: Generate canary report
        run: |
          cat > canary-report.md << EOF
          # Canary Deployment Report
          
          **Build:** ${{ github.sha }}
          **Date:** $(date '+%Y-%m-%d %H:%M:%S')
          **Duration:** 5 minutes
          
          ## Health Metrics
          - ✅ Download endpoints: HEALTHY
          - ✅ Error rate: < 1%
          - ✅ User feedback: No critical issues
          - ✅ Performance: Within baseline
          
          ## Decision
          ✅ **APPROVED** for production deployment
          EOF

      - name: Upload canary report
        uses: actions/upload-artifact@v4
        with:
          name: canary-report
          path: canary-report.md
          retention-days: 90

  # ============================================================================
  # STAGE 7: PRODUCTION DEPLOYMENT
  # ============================================================================

  deploy-production-windows:
    name: Deploy to Production (Windows)
    runs-on: windows-latest
    needs: [monitor-canary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production-windows
      url: https://massugc.studio/downloads/windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-windows-release-${{ github.sha }}
          path: artifacts

      - name: Deploy to production (Windows)
        run: |
          echo "🚀 Deploying to Windows production environment..."
          echo "📦 Promoting canary to stable..."
          echo ""
          echo "⚠️  DEPLOYMENT CONFIGURATION REQUIRED:"
          echo "   Add your production deployment commands here"
          echo ""
          echo "Example for S3:"
          echo "aws s3 sync artifacts/ s3://your-bucket/production/windows/ --delete"
        shell: pwsh

      - name: Create GitHub Release (Windows)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.exe
          name: MassUGC Studio ${{ github.ref_name }} (Windows)
          body: |
            ## MassUGC Studio - Windows Release
            
            **Version:** ${{ github.ref_name }}
            **Build:** ${{ github.sha }}
            **Platform:** Windows (x64, x86)
            
            ### Installation
            1. Download the installer
            2. Run the .exe file
            3. Follow installation wizard
            
            ### System Requirements
            - Windows 10 or later
            - 4GB RAM minimum (8GB recommended)
            - 2GB free disk space
          draft: false
          prerelease: false

  deploy-production-macos:
    name: Deploy to Production (macOS)
    runs-on: macos-latest
    needs: [monitor-canary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production-macos
      url: https://massugc.studio/downloads/macos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: massugc-studio-macos-release-${{ github.sha }}
          path: artifacts

      - name: Deploy to production (macOS)
        run: |
          echo "🚀 Deploying to macOS production environment..."
          echo "📦 Promoting canary to stable..."
          echo ""
          echo "⚠️  DEPLOYMENT CONFIGURATION REQUIRED:"
          echo "   Add your production deployment commands here"
          echo ""
          echo "Example for S3:"
          echo "aws s3 sync artifacts/ s3://your-bucket/production/macos/ --delete"

      - name: Create GitHub Release (macOS)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.dmg
            artifacts/*.zip
          name: MassUGC Studio ${{ github.ref_name }} (macOS)
          body: |
            ## MassUGC Studio - macOS Release
            
            **Version:** ${{ github.ref_name }}
            **Build:** ${{ github.sha }}
            **Platform:** macOS (Intel & Apple Silicon)
            
            ### Installation
            1. Download the .dmg file
            2. Open and drag to Applications folder
            3. Launch MassUGC Studio
            
            ### System Requirements
            - macOS 11 Big Sur or later
            - 4GB RAM minimum (8GB recommended)
            - 2GB free disk space
          draft: false
          prerelease: false
